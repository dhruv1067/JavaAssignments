Ans 1:  Collection Framework is a combination of classes and interface, which is used to store and manipulate the data in the form of objects. It provides various classes such as ArrayList, Vector, Stack, and HashSet, etc. and interfaces such as List, Queue, Set, etc. for this purpose

Ans 2: ArrayList : Its uses a dynamic array. It is not efficient for manipulation. It is better to store and fetch data. It provides random access. It takes less memory overhead as it stores only object.
LinkedList : It uses a doubly linked list. It is efficient for manipulation. It is better to manipulate data. It does not provide random access. It takes more memory overhead, as it stores the object as well as the address of that object.

Ans 3: Iterator : It traverses the elements in the forward direction only. It can be used in List, Set, and Queue. It can only perform a remove operation while traversing the collection.
ListIterator : It traverses the elements in backward and forward directions both. It can be used in list only. It can perform add, remove and set operation while traversing the collection. 

Ans 4: Iterator: It can traverse legacy and non-legacy elements. It is fail-fast. It is slower than enumeration. It can perform a remove operation while traversing the collection.
Enumeration: It can traverse only legacy elements. It is not fail-fast. It is faster than iterator. It can perform only traverse operations on the collection.

Ans 5:  The List and Set both extend the collection interface. However, there are some differences between the two which are listed below
 The List can contain duplicate elements whereas Set includes unique items
 The List is an ordered collection which maintains the insertion order whereas Set is an unordered collection which does not preserve the insertion order
 The List interface contains a single legacy class which is Vector class whereas the Set interface does not have any legacy class
 The List interface can allow a number of null values whereas Set interface only allows a single null value

Ans 6: : Both HashSet and TreeSet are implementations of the Set interface in Java, but they have some differences in terms of their properties and usage
 Ordering: HashSet is an unordered collection of elements, while TreeSet is a sorted set of elements based on their natural order or a custom comparator
 Duplication: HashSet does not allow duplicate elements, while TreeSet does not allow duplicates as well
 Implementation: HashSet is implemented using a hash table, while TreeSet is implemented using a self balancing binary search tree (Red-Black tree)
 Performance: HashSet has constant-time complexity O(1) for adding, removing, and testing the existence of an element, while TreeSet has a logarithmic-time complexity O(log n) for these operations due to the self balancing property
 Memory usage: HashSet uses less memory than TreeSet because it only stores the elements, while TreeSet stores additional information for maintaining the order
 Iteration: HashSet provides no guarantees regarding the order of iteration, while TreeSet guarantees the elements are iterated in sorted order
 Usage: HashSet is suitable when ordering is not important, and fast access and membership tests are needed. TreeSet is suitable when elements need to be sorted or accessed in a specific order.

Ans 7:  Both arrays and ArrayLists are used to store collections of elements in Java, but they have some differences in terms of their properties and usage
 Type: Arrays can store elements of primitive data types as well as objects, while ArrayList can only store objects
 Size: The size of an array is fixed once it is created, while the size of an ArrayList can be dynamically increased or decreased by adding or removing elements
 Mutability: Arrays are mutable, meaning that you can modify the elements in an array after it has been created. ArrayList is also mutable, but the only way to modify it is by adding, removing or modifying elements
 Performance: Arrays have better performance than ArrayLists for certain operations, such as accessing elements by index, because they are implemented as a continuous block of memory. ArrayLists, on the other hand, use dynamic memory allocation and are implemented as a dynamic array, which may result in more memory overhead and slower performance for certain operations
 Methods: Arrays have a limited set of methods compared to ArrayLists, which provides more methods for manipulating the collection, such as adding, removing, and sorting elements
 Initialization: Arrays can be initialized with values at the time of creation, while ArrayList requires the use of methods to add elements to the collection
 Compatibility: Arrays are compatible with traditional for-loops and can be easily passed to other methods, while ArrayList requires the use of a special for-each loop and may require more code to be passed to other methods.

Ans 8: A Map is a collection in Java that stores data as key-value pairs, where each key is unique

Ans 9:  The commonly used implementations of Map in Java are HashMap, TreeMap, LinkedHashMap, and ConcurrentHashMap

Ans 10:  HashMap is an unordered collection that uses hashing to store the key-value pairs, while TreeMap is a sorted collection that stores the key-value pairs in a sorted order based on the natural order of the keys or a custom Comparator

Ans 11:  we can check if a key exists in a Map in Java using the containsKey() method or the get() method. The 
containsKey() method returns a boolean value indicating whether the Map contains the specified key, while 
the get() method returns the value associated with the specified key, or null if the key is not present in the Map.